file(GLOB ${PROJECT_NAME}_SOURCES *.cpp)
file(GLOB ${PROJECT_NAME}_HEADERS *.h)
file(GLOB_RECURSE ${PROJECT_NAME}_HEADERS cppcodec/*.hpp)

list(APPEND ${PROJECT_NAME}_SOURCES ed/ed25519.c)
list(APPEND ${PROJECT_NAME}_HEADERS ed/ed25519.h)


set(${PROJECT_NAME}_DEPS
    ${${PROJECT_NAME}_SOURCES}
    ${${PROJECT_NAME}_HEADERS}
)

find_package(OpenSSL REQUIRED)
if(NOT DEFINED OPENSSL_INCLUDE_DIR)
  message(SEND_ERROR "Could not find OpenSSL. Please download and install it first!")
endif()

set(THREADS_PREFER_PTHREAD_FLAG ON)
if(IOS)
  set(CMAKE_THREAD_LIBS_INIT "-lpthread")
  set(CMAKE_HAVE_THREADS_LIBRARY 1)
  set(CMAKE_USE_WIN32_THREADS_INIT 0)
  set(CMAKE_USE_PTHREADS_INIT 1)
else()
  find_package(Threads REQUIRED)
endif()
if(THREADS_HAVE_PTHREAD_ARG) # compile time flag
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
endif()

if(WIN32)
    add_executable(${PROJECT_NAME} ${${PROJECT_NAME}_DEPS} windows/resource.rc)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64 -Ofast -flto -march=native -funroll-loops -static")
    target_link_libraries(${PROJECT_NAME} ${OPENSSL_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} ws2_32)
else()
    add_executable(${PROJECT_NAME} ${${PROJECT_NAME}_DEPS})
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64 -Ofast -flto -march=native -funroll-loops")
    target_link_libraries(${PROJECT_NAME} ${OPENSSL_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
endif()

target_link_libraries(${PROJECT_NAME} sodium)
